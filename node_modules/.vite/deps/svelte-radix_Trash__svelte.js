import "./chunk-W6QE4LMT.js";
import {
  add_locations,
  append,
  check_target,
  comment,
  hmr,
  if_block,
  init,
  legacy_api,
  legacy_rest_props,
  ns_template,
  prop,
  set_attributes
} from "./chunk-QGPGZD3U.js";
import {
  bubble_event
} from "./chunk-CPGNEDHD.js";
import {
  child,
  event,
  first_child
} from "./chunk-E6IRYBFC.js";
import {
  getContext,
  mark_module_end,
  mark_module_start,
  pop,
  push,
  set,
  source,
  template_effect
} from "./chunk-QPAR6CJR.js";
import "./chunk-UJOSQBOZ.js";
import "./chunk-PMCBTWW3.js";
import "./chunk-JHU3233G.js";
import "./chunk-YWUGNIHA.js";
import "./chunk-DWA4UIM3.js";

// node_modules/svelte-radix/dist/Trash.svelte
mark_module_start();
Trash.filename = "node_modules/svelte-radix/dist/Trash.svelte";
var root_1 = add_locations(ns_template(`<svg><path fill-rule="evenodd" clip-rule="evenodd" d="M5.5 1C5.22386 1 5 1.22386 5 1.5C5 1.77614 5.22386 2 5.5 2H9.5C9.77614 2 10 1.77614 10 1.5C10 1.22386 9.77614 1 9.5 1H5.5ZM3 3.5C3 3.22386 3.22386 3 3.5 3H5H10H11.5C11.7761 3 12 3.22386 12 3.5C12 3.77614 11.7761 4 11.5 4H11V12C11 12.5523 10.5523 13 10 13H5C4.44772 13 4 12.5523 4 12V4L3.5 4C3.22386 4 3 3.77614 3 3.5ZM5 4H10V12H5V4Z" fill="currentColor"></path></svg>`), Trash.filename, [[12, 2, [[31, 4]]]]);
var root_2 = add_locations(ns_template(`<svg><path fill-rule="evenodd" clip-rule="evenodd" d="M5.5 1C5.22386 1 5 1.22386 5 1.5C5 1.77614 5.22386 2 5.5 2H9.5C9.77614 2 10 1.77614 10 1.5C10 1.22386 9.77614 1 9.5 1H5.5ZM3 3.5C3 3.22386 3.22386 3 3.5 3H5H10H11.5C11.7761 3 12 3.22386 12 3.5C12 3.77614 11.7761 4 11.5 4H11V12C11 12.5523 10.5523 13 10 13H5C4.44772 13 4 12.5523 4 12V4L3.5 4C3.22386 4 3 3.77614 3 3.5ZM5 4H10V12H5V4Z" fill="currentColor"></path></svg>`), Trash.filename, [[39, 2, [[49, 4]]]]);
function Trash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "size",
    "role",
    "color",
    "ariaLabel",
    "withEvents"
  ]);
  push($$props, false, Trash);
  const ctx = getContext("iconCtx") ?? {};
  let size = prop($$props, "size", 8, () => ctx.size || "24");
  let role = prop($$props, "role", 8, () => ctx.role || "img");
  let color = prop($$props, "color", 8, () => ctx.color || "currentColor");
  let ariaLabel = prop($$props, "ariaLabel", 0, "trash,");
  let withEvents = prop($$props, "withEvents", 0, false);
  init();
  var fragment = comment();
  var node = first_child(fragment);
  if_block(
    node,
    withEvents,
    ($$anchor2) => {
      var svg = root_1();
      let attributes;
      var path = child(svg);
      template_effect(() => attributes = set_attributes(
        svg,
        attributes,
        {
          width: size(),
          height: size(),
          ...$$restProps,
          role: role(),
          "aria-label": ariaLabel(),
          viewBox: "0 0 15 15",
          fill: color(),
          xmlns: "http://www.w3.org/2000/svg"
        },
        false,
        ""
      ));
      event("click", svg, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keydown", svg, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keyup", svg, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("focus", svg, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("blur", svg, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseenter", svg, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseleave", svg, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseover", svg, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseout", svg, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      append($$anchor2, svg);
    },
    ($$anchor2) => {
      var svg_1 = root_2();
      let attributes_1;
      var path_1 = child(svg_1);
      template_effect(() => attributes_1 = set_attributes(
        svg_1,
        attributes_1,
        {
          width: size(),
          height: size(),
          ...$$restProps,
          role: role(),
          "aria-label": ariaLabel(),
          viewBox: "0 0 15 15",
          fill: color(),
          xmlns: "http://www.w3.org/2000/svg"
        },
        false,
        ""
      ));
      append($$anchor2, svg_1);
    }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  const s = source(Trash);
  const filename = Trash.filename;
  Trash = hmr(s);
  Trash.filename = filename;
  if (import.meta.hot.acceptExports) {
    import.meta.hot.acceptExports(["default"], (module) => {
      set(s, module.default);
    });
  } else {
    import.meta.hot.accept((module) => {
      set(s, module.default);
    });
  }
}
var Trash_default = Trash;
mark_module_end(Trash);
export {
  Trash_default as default
};
//# sourceMappingURL=svelte-radix_Trash__svelte.js.map
